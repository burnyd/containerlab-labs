{% set switch.platform = overlay_controller.platform %}
{% set switch.mgmt_ip = overlay_controller.nodes[inventory_hostname].mgmt_ip %}
{% set switch.spanning_tree_mode = "none" %}
{% for node in overlay_controller.nodes | arista.avd.natural_sort %}
{%     if node == inventory_hostname %}
{%         set switch.id = overlay_controller.nodes[node].id %}
{# Get local RR/RS interface to configure #}
{%         if overlay_controller.nodes[ node ].uplink_to_remote_switches is defined %}
{%             set switch.uplink_to_remote_switches = overlay_controller.nodes[node].uplink_to_remote_switches %}
{%         else %}
{%             set switch.uplink_to_remote_switches = overlay_controller.defaults.uplink_to_remote_switches %}
{%         endif %}
{# Get remote switch interface to configure #}
{%         if overlay_controller.nodes[node].remote_switches_interfaces is defined %}
{%             set switch.remote_switches_interfaces = overlay_controller.nodes[node].remote_switches_interfaces %}
{%         endif %}
{# Get remote hostname #}
{%         if overlay_controller.nodes[node].remote_switches is defined %}
{%             set switch.remote_switches = overlay_controller.nodes[node].remote_switches %}
{%         else %}
{%             set switch.remote_switches = overlay_controller.defaults.remote_switches %}
{%         endif %}
{# Get ASN of remote devices where RS/RR are connected #}
{%         set switch.remote_switches_asn = [] %}
{%         for remote_switch in switch.remote_switches %}
{%             set remote_switch_vars = hostvars[ remote_switch ] %}
{%             if remote_switch_vars.type == 'l3leaf' %}
{%                 for l3leaf_node_group in remote_switch_vars.l3leaf.node_groups | arista.avd.natural_sort %}
{%                     if remote_switch in remote_switch_vars.l3leaf.node_groups[l3leaf_node_group].nodes | arista.avd.natural_sort %}
{%                         do switch.remote_switches_asn.append( remote_switch_vars.l3leaf.node_groups[l3leaf_node_group].nodes[remote_switch].bgp_as | arista.avd.default(
                                                                 remote_switch_vars.l3leaf.node_groups[l3leaf_node_group].bgp_as,
                                                                 remote_switch_vars.l3leaf.defaults.bgp_as) ) %}
{%                         break %}
{%                     endif %}
{%                 endfor %}
{%             elif remote_switch_vars.type == 'spine' %}
{%                 do switch.remote_switches_asn.append( remote_switch_vars.spine.bgp_as ) %}
{%             elif remote_switch_vars.type == 'super-spine' %}
{%                 do switch.remote_switches_asn.append( remote_switch_vars.super_spine.bgp_as ) %}
{%             elif remote_switch_vars.type == 'overlay-controller' %}
{%                 do switch.remote_switches_asn.append( remote_switch_vars.overlay_controller.nodes[some_switch].bgp_as | arista.avd.default(remote_switch_vars.overlay_controller.defaults.bgp_as)) %}
{%             endif %}
{%         endfor %}
{%         set switch.rack = overlay_controller.nodes[node].rack | arista.avd.default(
                                    overlay_controller.defaults.rack ) %}
{%         if bgp_as is arista.avd.defined and switch.overlay_routing_protocol == 'ibgp' %}
{%             set switch.bgp_as = bgp_as %}
{%         else %}
{%             set switch.bgp_as = overlay_controller.nodes[node].bgp_as | arista.avd.default(
                                   overlay_controller.defaults.bgp_as) %}
{%         endif %}
{%         set switch.router_id = overlay_controller_loopback_network_summary | ipaddr('network') | ipmath(switch.id) %}
{%         set switch.bgp_defaults = overlay_controller_bgp_defaults | arista.avd.default([]) %}
{# Logic for EVPN Role for Overlay BGP Peerings #}
{# For super-spine the default value is none #}
{%         set switch.evpn_role = overlay_controller.nodes[inventory_hostname].evpn_role | arista.avd.default(
                                  overlay_controller.defaults.evpn_role,
                                  'none') %}
{%         set switch.raw_evpn_route_servers = overlay_controller.nodes[inventory_hostname].evpn_route_servers | arista.avd.default(
                                               overlay_controller.defaults.evpn_route_servers,
                                               []) %}
{%     endif %}
{% endfor %}
